# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1L6fCAfRib4OpjpdJH7M3DzepsW6B0nJq
"""

from keras.models import Sequential
from keras.layers import LSTM, Dense
import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from keras.utils import to_categorical
import matplotlib.pyplot as plt2
import math


data_dim = 16
timesteps = 8
num_classes = 10

def get_data(normalized=0):
    # col_names = ['Date','Sunrise','Sunset','Daylength','HourofDay','HourNumber','Day','Day_No','RelativeFrequency','PercentageTripperHour','Numberoftripsperhour','Day_or_Night','1_or_0']
    # col_names = ['Date', 'Sunrise', 'Sunset', 'Daylength', 'HourofDay', 'HourNumber', 'Day_No.','NumberTripsperday']
    col_names = ['Date', 'Day_No','NumberTripsperday','RelativeFrequency','PercentageTripperHour','1_or_0','HourofDay']
    # stocks = pd.read_csv(r"drive/My Drive/sample.csv", header=0)
    stocks = pd.read_csv(r"Dataset_Daylight_Rainfall_Berlin4.csv", header=0)

    df = pd.DataFrame(stocks)
    df['RelativeFrequency'] = df['RelativeFrequency'] ;
    df['PercentageTripperHour'] = df['PercentageTripperHour'];
    df['HourofDay'] = pd.to_datetime(df['HourofDay'],format= '%H:%M:%S' ).dt.hour;

    print(df.columns)
    # df.drop(['Sunrise','Sunset','Daylength','HourofDay','HourNumber', 'Day','RelativeFrequency','Numberoftripsperhour','Day_or_Night'], axis=1, inplace=True)
    # df.drop([1,2,3,4,5,6,8,11])
    return df

#mount the drive

# from google.colab import drive
# drive.mount('/content/drive')

data = get_data()
labels = data.columns

data.drop(['Date'],inplace=True, axis='columns')

#data["1_or_0"] = data["1_or_0"].astype('category')

data["1_or_0"] = to_categorical(data["1_or_0"])

print ('data head', data.head())

train_size = int(len(data) * 0.8)
train, test = data[0:train_size], data[train_size:len(data)]
print('Observations: %d' % (len(data)))
print('Training Observations: %d' % (len(train)))
print('Testing Observations: %d' % (len(test)))

print ('train head',train.head())

x_train = train.iloc[:,:-2]
y_train = train.iloc[:,-2:]

x_test = test.iloc[:,:-2]
y_test = test.iloc[:,-2:]

print ('x train head', x_train.head())
print ('y train head', y_train.head())

print ('x test head', x_test.head())
print ('y test head', y_test.head())

data_dim =  x_train.shape[1] #number of input features
print('data_dim', data_dim)

# # expected input data shape: (batch_size, timesteps, data_dim)
model = Sequential()
model.add(LSTM(32, return_sequences=True,
               input_shape=(1, data_dim)))  # returns a sequence of vectors of dimension 32
model.add(LSTM(32, return_sequences=True))  # returns a sequence of vectors of dimension 32
model.add(LSTM(32))  # return a single vector of dimension 32
model.add(Dense(2, activation='softmax'))

model.compile(loss='mean_squared_error',
              optimizer='rmsprop',
              metrics=['accuracy']
              )

# model.fit(x_train, y_train,
#           batch_size=64, epochs=5,
#           validation_data=(x_val, y_val))
# result = model.evaluate(x_val,y_val)

trainX = np.array(x_train)
testX = np.array(x_test)
print(testX)
print('shape', trainX.shape[0],trainX.shape[1])
trainX = np.reshape(trainX, (trainX.shape[0], 1, trainX.shape[1]))
testX = np.reshape(testX, (testX.shape[0], 1, testX.shape[1]))
print('sdfsdfd')
print(y_test)

print(y_train)
model.fit(trainX, y_train,
          batch_size=64, epochs=8)

# result = model.evaluate(testX,y_test)


trainScore = model.evaluate(trainX,y_train , verbose=0)
print('Train Score: %.2f MSE (%.2f RMSE)' % (trainScore[0], math.sqrt(trainScore[0])))
#
testScore = model.evaluate(testX, y_test, verbose=0)
print('Test Score: %.2f MSE (%.2f RMSE)' % (testScore[0], math.sqrt(testScore[0])))
#
print('test: ', testScore)

print(model.predict(testX))

print (model.predict_classes(testX))

print (model.predict_proba(testX))
print('test: ', testScore)
print('result shape',np.shape(testScore))

p = model.predict(testX)
print('result', p)
plt2.plot(p,color='red', label='prediction')
plt2.plot(y_test,color='blue', label='y_test')
plt2.legend(loc='upper right')
plt2.show()